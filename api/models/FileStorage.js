const mongoose = require('mongoose');
const crypto = require('crypto');

const FileStorageSchema = new mongoose.Schema({
  sessionId: {
    type: String,
    required: true,
    index: true
  },
  fileName: {
    type: String,
    required: true
  },
  fileType: {
    type: String,
    required: true
  },
  mimeType: {
    type: String,
    required: true
  },
  fileSize: { // Original size
    type: Number,
    required: true
  },
  compressedSize: { // Compressed size (if compressed)
    type: Number,
    required: false
  },
  content: {
    type: mongoose.Schema.Types.Buffer,
    required: true
  },
  parentFolder: {
    type: String,
    default: null
  },
  filePath: {
    type: String,
    required: true
  },
  storageType: {
    type: String,
    default: 'document'
  },
  isCompressed: {
    type: Boolean,
    default: false
  },
  uploadedAt: {
    type: Date,
    default: Date.now
  },
  lastModified: {
    type: Date,
    default: Date.now
  },
  // Versioning fields
  version: {
    type: Number,
    default: 1,
    min: 1
  },
  contentHash: {
    type: String,
    required: false // Generated by pre-save middleware
  },
  isLatest: {
    type: Boolean,
    default: true,
    index: true
  },
  previousVersion: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'FileStorage',
    default: null
  },
  changeDescription: {
    type: String,
    default: null
  }
}, {
  timestamps: true
});

// Pre-save middleware to generate content hash
FileStorageSchema.pre('save', function(next) {
  if (this.isModified('content')) {
    this.contentHash = crypto.createHash('sha256').update(this.content).digest('hex');
  }
  next();
});

// Optimized compound indexes for versioning queries
FileStorageSchema.index({ sessionId: 1, filePath: 1, isLatest: 1 });
FileStorageSchema.index({ sessionId: 1, filePath: 1, version: -1 });
FileStorageSchema.index({ sessionId: 1, parentFolder: 1, isLatest: 1 });
FileStorageSchema.index({ contentHash: 1 });
FileStorageSchema.index({ createdAt: 1 }); // For cleanup by date
FileStorageSchema.index({ sessionId: 1, filePath: 1, createdAt: -1 }); // For version history

// Static methods for versioning operations
FileStorageSchema.statics.findLatestVersion = function(sessionId, filePath) {
  return this.findOne({ 
    sessionId, 
    filePath, 
    isLatest: true 
  });
};

FileStorageSchema.statics.findVersionHistory = function(sessionId, filePath, limit = 10) {
  return this.find({ 
    sessionId, 
    filePath 
  })
  .sort({ version: -1 })
  .limit(limit)
  .select('-content'); // Exclude content for performance
};

FileStorageSchema.statics.findByContentHash = function(contentHash) {
  return this.findOne({ contentHash });
};

module.exports = mongoose.model('FileStorage', FileStorageSchema);
